service: rsp-cpms-checking

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-west-1
  environment:
    statemachine_arn: ${self:resources.Outputs.cpmsCheckingStateMachine.Value}
  iamRoleStatements:
    - Effect: "Allow"
      Action: 
        - "sqs:ReceiveMessage"
        - "sqs:DeleteMessage"
        - "sqs:GetQueueAttributes"
      Resource: arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:CPMS_Launched_Payments
    - Effect: "Allow"
      Action:
        - "states:StartExecution"
      Resource: "*"

custom:
  initialWait: 120
  maxAttempts: 4

functions:
  start:
    handler: handler.start
    events:
      - sqs:
          arn: arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:CPMS_Launched_Payments
    environment:
      statemachine_arn: ${self:resources.Outputs.cpmsCheckingStateMachine.Value}
  check:
    handler: handler.check

stepFunctions:
  stateMachines:
    cpmsCheckingStateMachine:
      definition:
        Comment: "A state machine to check if launched CPMS payments have been successful"
        StartAt: wait
        States:
          wait:
            Type: Wait
            Seconds: ${self:custom.initialWait}
            Next: CheckState
          CheckState:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-check
            Retry:
            - ErrorEquals:
              - HandledError
              IntervalSeconds: 1
              MaxAttempts: 2
              BackoffRate: 2
            - ErrorEquals:
              - States.TaskFailed
              IntervalSeconds: 30
              MaxAttempts: 2
              BackoffRate: 2
            - ErrorEquals:
              - States.ALL
              IntervalSeconds: 5
              MaxAttempts: 5
              BackoffRate: 2
            End: true
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters

resources:
  Resources:
    CPMSLaunchedPayments:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "CPMS_Launched_Payments"